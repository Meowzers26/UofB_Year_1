0 = false; 1 = true (any non-zero value is interpreted as true)


if (expression) statement;
else if (expression) statement;
else statement;                      // optional else

OR

if (expression) { }                 // block can be used for mult expressions (no semicolon)


procedure can be declared before being defined --> prototyping
    - resolves mutual function calls, makes procedure ordering less of a problem


most local scope takes precedence, shadowing identifier in more global scope


swich tests integer expression against constant value

swith (INT_EXPRESSION) {
    case CONST_EXPRESSION1: STATEMENT1; break;
    case CONST_EXPRESSION2: STATEMENT2; break;
    ...
    default:STATEMENTS
}


while (EXPRESSION) {
    STATEMENTS;
}


#define _POSIX_C_SOURCE 200809L --> portable cross-platform interface
c is portable but not platform-independent


c does not detect overflow of arrays (referencing seq[3] when there are only 3 elements)



char c = 'A';
printf(%c %hhi\n, c, c);     will print "A 65"

ASCII numbers:
48 -- 57        = 0 -- 9
65 -- 90        = uppercase letters
97 -- 122       = lowercase letters
\0              = the null character (ASCII code 0, not 48)

strings are arrays of chars (in their ASCII codes, single quote chars, or full string in double quotes (automatically adds null character)) that ends with null character
char textA[3] = {72, 105,0};
printf("%s\n", textA);      will print "hi"